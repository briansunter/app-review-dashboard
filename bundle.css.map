{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/AutoComplete.svelte"
  ],
  "sourcesContent": [
    "<script>\n import range from 'lodash/range';\n import meanBy from 'lodash/meanBy';\n import WordCloud from './WordCloud.svelte';\n import AutoComplete from './AutoComplete.svelte';\n import { currentApp } from './stores'\n import { getReviews, formatReviews, reviewsSentiment } from './reviews';\n\n import 'material-dashboard/assets/css/material-dashboard.css';\n import 'material-dashboard/assets/css/bootstrap.min.css';\n\n $: appReviews = getReviews({appId:$currentApp.id});\n\n let gramOptions = range(1,6).map(x => x.toString());\n\n let gramOptionsValue = \"2\"\n\n $: formattedReviews = appReviews\n   .then(r=> formatReviews({reviews:r, nGrams: parseInt(gramOptionsValue)}))\n\n $: currentAppReviewsSentiment = appReviews\n   .then(reviews=>meanBy(reviews.map(reviewsSentiment),'score'));\n\n</script>\n\n<style>\n .navbar-brand {\n   font-size: 40pt;\n   margin-top: 20pt;\n   margin-bottom: 20pt;\n }\n .input-group {\n   padding: 5pt;\n   background-color: white;\n }\n\n .gramSelect {\n   padding: 5pt;\n   padding-left:10pt;\n   padding-right:10pt;\n }\n\n .gramSelectLabel {\n   padding: 5pt;\n }\n .card-stats {\n   height: 12vmax;\n }\n\n</style>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-wrapper\">\n        <h1 class=\"display-2\" href={$currentApp.appLink}>{ $currentApp.name } Dashboard</h1>\n      </div>\n      <form class=\"navbar-form\">\n        <div class=\"input-group border mb-3 flex-nowrap\">\n          <AutoComplete />\n          <div class=\"input-group-append\" >\n          <label class=\"gramSelectLabel\" for=\"gramSelect\"> nGrams </label>\n          <select class=\"gramSelect\" bind:value={gramOptionsValue}>\n            {#each gramOptions as go}\n            <option value={go}>{go}</option>\n            {/each}\n          </select>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-lg-3 col-md-6 col-sm-6\">\n      <div class=\"card card-stats\">\n        <div class=\"card-header card-header-success card-header-icon\">\n          <div class=\"card-icon\">\n            <i class=\"material-icons\">star</i>\n          </div>\n          <p class=\"card-category\">Current Version</p>\n          <h3 class=\"card-title\">{$currentApp.currentVersionRating}\n            <small>Stars</small>\n          </h3>\n        </div>\n        <div class=\"card-footer\">\n          <p class=\"card-category\"> Out of {$currentApp.currentVersionRatingCount} Reviews. </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-lg-3 col-md-6 col-sm-6\">\n      <div class=\"card card-stats\">\n        <div class=\"card-header card-header-warning card-header-icon\">\n          <div class=\"card-icon\">\n            <i class=\"material-icons\">rate_review</i>\n          </div>\n          <p class=\"card-category\">Average Rating</p>\n          <h3 class=\"card-title\">{$currentApp.appRating}\n            <small>Stars</small>\n          </h3>\n        </div>\n        <div class=\"card-footer\">\n          <p class=\"card-category\"> Out of {$currentApp.appRatingCount} Reviews. </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-lg-3 col-md-6 col-sm-6\">\n      <div class=\"card card-stats\">\n        <div class=\"card-header card-header-success card-header-icon\">\n          <div class=\"card-icon\">\n            <i class=\"material-icons\">sentiment_satisfied</i>\n          </div>\n          <p class=\"card-category\">Sentiment</p>\n\n          {#await currentAppReviewsSentiment}\n          <h3 class=\"card-category\">Loading...</h3>\n          {:then value}\n          <h3 class=\"card-title\">{value.toString().substring(0,6)}</h3>\n          {:catch error}\n          <p>Something went wrong: {error.message}</p>\n          {/await}\n        </div>\n        <div class=\"card-footer\">\n          <p class=\"card-category\"> Out of {$currentApp.appRatingCount} Reviews. </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-lg-3 col-md-6 col-sm-6\">\n      <div class=\"card card-stats\">\n        <div class=\"card-header card-header-success card-header-icon\">\n          <div class=\"card-icon\">\n            <i class=\"material-icons\">store</i>\n          </div>\n          <p class=\"card-category\">{$currentApp.name}</p>\n          <h3 class=\"card-title\">{$currentApp.appPrice}</h3>\n        </div>\n        <div class=\"card-footer\">\n          <a class=\"card-category\" href={$currentApp.link}>Go to store </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n{#await formattedReviews}\n<div class=\"container\">\n  <p>Loading Word Cloud...</p>\n</div>\n{:then value}\n<WordCloud words={value} />\n{:catch error}\n<p>Something went wrong: {error.message}</p>\n{/await}\n",
    "<script>\n import autocomplete from 'autocompleter';\n import values from 'lodash/values';\n import groupBy from 'lodash/groupBy';\n import mapValues from 'lodash/mapValues';\n import { onMount } from 'svelte';\n import 'autocompleter/autocomplete.css';\n import { currentApp } from './stores'\n\n let apps = {};\n export let selectedApp = () => null;\n\n onMount(async () => {\n   var input = document.getElementById(\"appSearch\");\n   autocomplete({\n     input: input,\n     fetch: async function(text, update) {\n       text = text.toLowerCase();\n       let formattedText = encodeURI(text);\n\n       let cacheApps = values(apps).map(a => ({value: a.id , label: a.name}));\n       update(cacheApps);\n\n       let res = await fetch(`https://cors.io/?https://itunes.apple.com/search?term=${formattedText}&entity=software`);\n       let appsResponse = await res.json();\n\n       let formattedApps = appsResponse.results.map(a=> ({id: a.trackId, name:a.trackName, link: a.trackViewUrl, currentVersionRatingCount: a.userRatingCountForCurrentVersion, currentVersionRating: a.averageUserRatingForCurrentVersion, appRating: a.averageUserRating, appRatingCount: a.userRatingCount, appPrice:a.formattedPrice}));\n       apps = mapValues(groupBy(formattedApps,'id'),x=>x[0]);\n\n       let labelApps = values(apps).map(a => ({value: a.id , label: a.name, appRatingCount:a.appRatingCount}));\n       update(labelApps);\n     },\n     onSelect: function(item) {\n       input.value = item.label;\n       currentApp.set(apps[item.value]);\n       selectedApp(apps[item.value]);\n     }\n   });\n });\n</script>\n<style>\n\n .autoComplete_results_list li {\nfont-size: 2rem;\n }\n .appSearch {\n   width: 100%;\n   padding: 10pt;\n }\n\n</style>\n\n<input id=\"appSearch\" type=\"text\" value=\"\" class=\"appSearch\" placeholder=\"Search for an App...\" autocomplete=\"off\">\n"
  ],
  "names": [],
  "mappings": "AA+BC,YAAY,cAAC,CAAC,AACZ,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAED,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,GAAG,CACZ,aAAa,IAAI,CACjB,cAAc,IAAI,AACpB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,WAAW,cAAC,CAAC,AACX,MAAM,CAAE,MAAM,AAChB,CAAC;ACFD,UAAU,eAAC,CAAC,AACV,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,AACf,CAAC"
}